{"version":3,"sources":["def.tsx","serviceWorker.ts","index.tsx"],"names":["urlParams","URLSearchParams","window","location","search","yearParam","Number","get","isNaN","Date","getFullYear","Error","keyParam","key","process","REACT_APP_KEY","console","log","url","config","name","reports","Object","entries","plans","activities","milestones","participants","map","id","columns","alias","method","mapping","x","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uNA+CMA,EAAY,IAAIC,gBAAgBC,OAAOC,SAASC,QAGhDC,EAAYC,OAAON,EAAUO,IAAI,SAEvC,GACEC,MAAMH,IACNA,EAAY,MACZA,GAAY,IAAII,MAAOC,cAEvB,MAAMC,MAAM,gCAId,IAAMC,EAAWZ,EAAUO,IAAI,OACzBM,EAAMC,8MAAYC,eAAiB,aAIzC,GAFAC,QAAQC,IAAI,CAAEJ,MAAKD,aAEfA,IAAaC,EACf,MAAMF,MAAM,aAOd,IAAMO,EAAM,qCAAuCb,EAuB7Cc,EAAmB,CAAEC,KAAM,OAAQC,QArBbC,OAAOC,QAAQ,CACzCC,MAzE2B,CAC3B,CAAEJ,KAAM,WACR,CAAEA,KAAM,OACR,CAAEA,KAAM,UACR,CAAEA,KAAM,WACR,CAAEA,KAAM,MACR,CAAEA,KAAM,QACR,CAAEA,KAAM,cACR,CAAEA,KAAM,kBACR,CAAEA,KAAM,WACR,CAAEA,KAAM,kBAgERK,WA7DgC,CAChC,CAAEL,KAAM,kBACR,CAAEA,KAAM,SACR,CAAEA,KAAM,OACR,CAAEA,KAAM,WACR,CAAEA,KAAM,WACR,CAAEA,KAAM,YACR,CAAEA,KAAM,eACR,CAAEA,KAAM,cACR,CAAEA,KAAM,UACR,CAAEA,KAAM,UACR,CAAEA,KAAM,YAmDRM,WAhDgC,CAChC,CAAEN,KAAM,mBACR,CAAEA,KAAM,SACR,CAAEA,KAAM,SACR,CAAEA,KAAM,SA6CRO,aA1CkC,CAClC,CAAEP,KAAM,WACR,CAAEA,KAAM,aACR,CAAEA,KAAM,YACR,CAAEA,KAAM,SACR,CAAEA,KAAM,YAsCPQ,KAAI,YAAoB,IAAD,mBAAjBC,EAAiB,KAAbC,EAAa,KACxB,MAAO,CACLD,KACAE,MAAOF,EACPX,MACAc,OAAQ,MACRF,UACAG,QAAS,SAACC,GAAY,IAAD,cAC+BA,EAAEL,IAGpD,MAD6B,CAHV,uBAYV,oBAAM,kBAAC,IAAD,CAAMV,OAAQA,KCxFfgB,QACW,cAA7BjC,OAAOC,SAASiC,UAEe,UAA7BlC,OAAOC,SAASiC,UAEhBlC,OAAOC,SAASiC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,+FACA,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDgIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlC,QAAQkC,MAAMA,EAAMC,c","file":"static/js/main.7b5257bf.chunk.js","sourcesContent":["import React from \"react\";\n\nimport { T, Init } from \"@nexys/tableau-wdc-react\";\n\nconst plans: T.ColumnDef[] = [\n  { name: \"Plan Id\" },\n  { name: \"Geo\" },\n  { name: \"Market\" },\n  { name: \"Country\" },\n  { name: \"BP\" },\n  { name: \"Ceid\" },\n  { name: \"Question 5\" },\n  { name: \"Marketing Plan\" },\n  { name: \"revenue\" },\n  { name: \"ownInvestment\" },\n];\n\nconst activities: T.ColumnDef[] = [\n  { name: \"mkt section id\" },\n  { name: \"start\" },\n  { name: \"end\" },\n  { name: \"n leads\" },\n  { name: \"channel\" },\n  { name: \"n people\" },\n  { name: \"description\" },\n  { name: \"lead value\" },\n  { name: \"tactic\" },\n  { name: \"budget\" },\n  { name: \"revenue\" },\n];\n\nconst milestones: T.ColumnDef[] = [\n  { name: \"mkt activity id\" },\n  { name: \"owner\" },\n  { name: \"title\" },\n  { name: \"date\" },\n];\n\nconst participants: T.ColumnDef[] = [\n  { name: \"plan id\" },\n  { name: \"firstName\" },\n  { name: \"lastName\" },\n  { name: \"email\" },\n  { name: \"phone\" },\n];\n\n// get query params\nconst urlParams = new URLSearchParams(window.location.search);\n\n// year\nconst yearParam = Number(urlParams.get(\"year\"));\n\nif (\n  isNaN(yearParam) ||\n  yearParam < 2016 ||\n  yearParam > new Date().getFullYear()\n) {\n  throw Error(\"date not in acceptable range\");\n}\n\n// key\nconst keyParam = urlParams.get(\"key\");\nconst key = process.env.REACT_APP_KEY || \"defaultKey\";\n\nconsole.log({ key, keyParam });\n\nif (keyParam !== key) {\n  throw Error(\"key wrong\");\n}\n\n// end query params\n\n// start parameters definition\n\nconst url = \"/business-plan/report/byYear?year=\" + yearParam;\n\nconst reports: T.Report[] = Object.entries({\n  plans,\n  activities,\n  milestones,\n  participants,\n}).map(([id, columns]) => {\n  return {\n    id,\n    alias: id,\n    url,\n    method: \"GET\",\n    columns,\n    mapping: (x: any) => {\n      const [head, ...content]: [string[], T.Value[]] = x[id];\n\n      const s: T.ServiceResponse = [head as string[], content];\n      return s;\n    },\n  };\n});\n\nconst config: T.Config = { name: \"BPMS\", reports };\n// end parameters defintion\n\nexport default () => <Init config={config} />;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./def\";\n//import App from './lib/tssaconnector'\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <p>Make sure this page is run from either Tableau or the simmulator</p>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}